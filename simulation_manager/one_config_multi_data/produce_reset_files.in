# Run setup sim
# Run stretch and produce reset files

variable num_restart_files equal 3 


# variable root string ../potentials # in friction_simulation folder
# variable config_data string ../config_builder/sheet_substrate # in friction_simulation folder

variable root string .
variable config_data string ${root}/sheet_substrate
variable dt equal 0.001
include setup_sim.in


variable relax_time equal 0.2
variable stretch_speed_pct equal 0.5
variable stretch_max_pct equal 0.2


variable pause_time1 equal 1
variable F_N equal 0.8e-9 # [N]
variable pause_time2 equal 5
variable drag_dir_x equal 0
variable drag_dir_y equal 1
variable drag_speed equal 5 # [m/s]
variable drag_length equal 10 
variable K equal 30.0
variable out_ext string _default 



# ---------- Computes ---------- #
## - Sheet - ##
# Full sheet
compute sheet_COM full_sheet com            # Center of mass
compute sheet_fz full_sheet reduce ave fz   # Average z-force

# Inner sheet 
compute sheet_fx sheet reduce sum fx        # Total force x
compute sheet_fy sheet reduce sum fy        # Total force y

## - Pullblocks - ##
compute PB_ylow_ymax PB_ylow reduce max y   # Lower y-limit for sheet
compute PB_yhigh_ymin PB_yhigh reduce min y # Upper y-limit for sheet
compute PB_ylow_com PB_ylow com             # Center of mass PB_ylow
compute PB_yhigh_com PB_yhigh com           # Center of mass PB_yhigh


## -- Substrate -- ##
compute substrate_zhigh substrate reduce max z # Max z-val of substrate

## Interactions ##
compute Ff substrate group/group full_sheet # friction forces
compute Ff_sheet substrate group/group sheet # friction forces
compute Ff_PB substrate group/group PB_tot # friction forces

## - Activate computes - ## 
thermo_style custom c_sheet_fz c_PB_ylow_ymax c_PB_yhigh_ymin c_substrate_zhigh c_PB_ylow_com[2] c_PB_yhigh_com[2] c_sheet_COM[3] 
run 0 # activate compute

# ---------- Derived variables ---------- #
## -- Seperation -- ##
variable sub_sheet_seperation equal c_sheet_COM[3]-c_substrate_zhigh  # seperation between substrate max and COM of sheet

## -- Force on PB -- ##
variable move_force_x equal c_sheet_fx+c_Ff[1]
variable move_force_y equal c_sheet_fy+c_Ff[2]
variable move_force_xy_norm equal sqrt(v_move_force_x^2+v_move_force_x^2)  

## -- Stretch -- ##
variable S0 equal c_PB_yhigh_ymin-c_PB_ylow_ymax    # start len of inner sheet
variable S_len equal c_PB_yhigh_ymin-c_PB_ylow_ymax # Updated len of inner sheet
variable stretch_pct equal (v_S_len-v_S0)/v_S0  # Updated stretch pct
variable stretch_speed equal v_stretch_speed_pct*v_S0 

## -- Drag -- ##
variable dir_norm equal $(sqrt(v_drag_dir_x^2+v_drag_dir_y^2))


# ---------- Output ---------- #
thermo 100
variable out_path string output_data
# dump 1 all custom 100 ${out_path}/system${out_ext}.data id type x y z vx vy vz
# dump 2 sheet custom 100 ${out_path}/sheet${out_ext}.data id type x y z
# dump 3 substrate_contact custom 100 ${out_path}/substrate_contact${out_ext}.data id type x y z


# ---------- Print procedure schedule ---------- #
# Timestamps
variable relax_steps equal $(floor(v_relax_time/dt))
variable stretch_steps equal $(floor(v_stretch_max_pct/v_stretch_speed_pct/dt))
variable pause1_steps equal $(floor(v_pause_time1/dt))
variable pause2_steps equal $(floor(v_pause_time2/dt))
variable drag_steps equal $(floor(v_drag_length/v_drag_speed/dt))

# Print
print "--------------------"
print "------SCHEDULE------"
print ""
print "--> Relax (step 0, 0 ps)"
print "Time: $(v_relax_steps) steps = $(v_relax_steps*dt) ps" 
print ""
print "--> Stretch sheet (step $(v_relax_steps), $(v_relax_steps*dt) ps)"
print "Amount: $(v_stretch_max_pct) % = $(v_stretch_max_pct*(v_pullblock_ylo-v_pullblock_yhi)) ang "
print "Speed: $(v_stretch_speed_pct) %/ps = $(v_stretch_speed) ang/ps"
print "Time:  $(v_stretch_steps) steps = $(v_stretch_steps*dt) ps"
print ""
print "--> Pause 1 (step $(v_relax_steps+v_stretch_steps), $((v_relax_steps+v_stretch_steps)*dt) ps)"
print "Time: $(v_pause1_steps) steps = $(v_pause1_steps*dt) ps"
print ""
print "--> Apply normal force (step $(v_relax_steps+v_stretch_steps+v_pause1_steps), $((v_relax_steps+v_stretch_steps+v_pause1_steps)*dt) ps)"
print "Amount: $(v_F_N/v_N_to_eV_over_ang*1e9) nN/m = $(v_F_N) eV/ang"
print ""
print "--> Pause 2 (step $(v_relax_steps+v_stretch_steps+v_pause1_steps), $((v_relax_steps+v_stretch_steps+v_pause1_steps)*dt) ps)"
print "Time: $(v_pause2_steps) steps = $(v_pause2_steps*dt) ps"
print ""
print "--> Drag sheet (step $(v_relax_steps+v_stretch_steps+v_pause1_steps+v_pause2_steps), $((v_relax_steps+v_stretch_steps+v_pause1_steps+v_pause2_steps)*dt) ps)"
print "Length: $(v_drag_length) ang"
print "Speed: $(v_drag_speed*v_s_to_ps/v_m_to_ang) m/s = $(v_drag_speed) ang/ps "
print "Spring constant: $(v_K*v_m_to_ang/v_N_to_eV_over_ang) N/m = $(v_K) eV/ang^2"
print "Time: $(v_drag_steps)  = $(v_drag_steps*dt) ps"
print ""
print "--> END (step $(v_relax_steps+v_stretch_steps+v_pause1_steps+v_pause2_steps+v_drag_steps), $((v_relax_steps+v_stretch_steps+v_pause1_steps+v_pause2_steps+v_drag_steps)*dt) ps)"
print "--------------------"
print "--------------------"
print ""



# write_restart tmp.*.restart
variable restart_freq equal floor(v_stretch_steps/(v_num_restart_files-1))
variable       stride equal stride(v_relax_steps,$(v_relax_steps+v_stretch_steps+v_restart_freq),v_restart_freq)
restart        v_stride stretch.*.restart
# restart        v_stride restart*/stretch.restart
# shell mkdir restart200
# shell mkdir restart400
# shell mkdir restart600
# Might avoid stride if we do not want to save 0 stretch as
# a restart since this file can go on to compute that one...

# ----------  Relax sheet ---------- #
# Set PB conditions
fix PB_xyz_ave PB_tot aveforce 0 0 0 # Average force (every atom feels same force vector)

print "--> Relax: $(v_relax_steps) timesteps, $(v_relax_steps*dt) ps"
thermo_style custom step time cpu cpuremain temp v_stretch_pct c_sheet_COM[3] v_sub_sheet_seperation c_sheet_fz
run  $(v_relax_steps) 

# ---------- Stretch sheet ---------- #
# Update fixes
unfix nve
fix nve free_atoms nve
fix ylow_move  PB_ylow move linear 0 $(-v_stretch_speed/2) NULL units box
fix yhigh_move PB_yhigh move linear 0 $(v_stretch_speed/2) NULL units box

print "--> Stretch: $(v_stretch_steps) timesteps, $(v_stretch_steps*dt) ps"
variable S0 equal $(c_PB_yhigh_ymin-c_PB_ylow_ymax) # Lock S0 after relaxing
run $(v_stretch_steps)
restart 0

