###########################################
# Relax and stretch system, and export    #
# restart files if num_stretch_files > 0. #
###########################################



# --- Rupture detection parameters --- #
if "${run_rupture_test}" then "jump SELF rupture_parameters_already_defined"
variable detection_freq_stretch equal 1000  # Number of timesteps between each rupture check
variable YS_mean_vals_stretch equal 10      # Number of y-stress mean values sampled
variable YS_vals_stretch equal 10           # Number of individual samples for each y-stress mean value
variable cluster_vals_stretch equal 10      # Number of cluster values sampled
label rupture_parameters_already_defined

# Setup system
include ${root}/setup_sim.in



# ----------  Relax sheet ---------- #
# Add spring to restrict rotation or movement of sheet COM:
#  - Hold PB COM in initial x-position
#  - Hold sheet COM in initial position
fix PB_ylow_x_hold PB_ylow_rigid spring tether 1e5 $(c_sheet_COM[1]) NULL NULL 0.0
fix PB_high_x_hold PB_yhigh_rigid spring tether 1e5 $(c_sheet_COM[1]) NULL NULL 0.0
fix sheet_COM_hold full_sheet spring tether 1e5 $(c_sheet_COM[1]) $(c_sheet_COM[2]) NULL 0.0

print "--> Relax: $(v_relax_steps) timesteps, $(v_relax_steps*dt) ps"
thermo_style custom step time cpu cpuremain c_sheetTemp c_subtopTemp v_stretch_pct v_full_sheet_bond_pct
run $(v_relax_steps-1)

# Lock S0 after relaxing and export S0 info via y-pos of tmp type 3 atom
variable S0 equal $(v_S0) 
if  "${num_stretch_files}>=1" then "create_atoms 3 single 0 $(v_S0) 0" &
"group S0_info type 3"
run 1

unfix PB_ylow_x_hold
unfix PB_high_x_hold
unfix sheet_COM_hold


# ----------  Write restart files ---------- #
# variable num_stretch_files index 0
if "${num_stretch_files}<=1" then "jump SELF after_restart"

variable RNSEED index -1  # Random seed (use command-line argument: -var RNSEED $RANDOM, to generate seed)
if "${RNSEED} >= 0" then "jump SELF RN_restart"  

variable restart_freq equal floor(v_stretch_steps/(v_num_stretch_files-1))
variable       stride equal stride(v_relax_steps,$(v_relax_steps+v_stretch_steps+v_restart_freq),v_restart_freq)
restart  v_restart_steps stretch_*_restart

jump SELF after_restart
label RN_restart

variable restart_freq equal floor(v_stretch_steps/(v_num_stretch_files))
variable start equal v_relax_steps+v_restart_freq*ceil((step-v_relax_steps)/v_restart_freq) # interval start
variable restart_steps equal round(random(v_start+1,v_start+v_restart_freq,v_RNSEED+1)) # random timestep in [start+1, start + restart_freq]
restart  v_restart_steps stretch_*_restart

label after_restart


# ------------------ Rupture detection calculations ------------------ #
if "!${rupture_detection}" then "jump SELF skip_rupture_calculations"

# Sampling parameters 
variable YS_Nfreq equal floor(v_detection_freq_stretch/v_YS_mean_vals_stretch)
variable YS_Nevery equal floor(v_YS_Nfreq/v_YS_vals_stretch)
variable cluster_Nevery equal floor(v_detection_freq_stretch/v_cluster_vals_stretch)


print ${YS_Nfreq}

# y-stress 
fix YS sheet ave/time ${YS_Nevery} ${YS_vals_stretch} ${YS_Nfreq} c_YS #file YS.txt # Mean values
fix YS_mean_vec sheet vector ${YS_Nfreq} f_YS              # Store mean values in vector
variable max_YS equal max(f_YS_mean_vec)                   # Compute max of mean values

# Cluster count mean value 
fix Ncluster full_sheet ave/time ${cluster_Nevery} ${cluster_vals_stretch} ${detection_freq_stretch} c_Ncluster #file cluster.txt

# Rupture conditions
variable stress_drop equal "f_YS < 0.1*v_max_YS"
variable cluster_split equal "f_Ncluster > 1" 
variable min_stretch equal "v_stretch_pct > 0.03"
variable stop_condition equal "(v_stress_drop && v_min_stretch) || v_cluster_split"

fix rupture_detector sheet halt ${detection_freq_stretch} v_stop_condition != 0 error continue 

# if thermo == detection_freq the following is possible
# thermo_style custom step time cpu cpuremain c_sheetTemp c_subtopTemp v_stretch_pct v_full_sheet_bond_pct f_YS v_max_YS f_Ncluster

########################################################################
label skip_rupture_calculations 





# ---------- Stretch sheet ---------- # 
# Update fixes
fix ylow_move  PB_ylow_rigid move linear 0 $(-v_stretch_speed/2) NULL units box
fix yhigh_move PB_yhigh_rigid move linear 0 $(v_stretch_speed/2) NULL units box

print "--> Stretch: $(v_stretch_steps) timesteps, $(v_stretch_steps*dt) ps"

run $(v_stretch_steps)
restart 0



# ---------- After stretch ---------- # 
# Update is_ruptured and unfix fixes with specific Nevery Nrepeat Nfreq choices
if "${rupture_detection}" then & 
"variable is_ruptured equal $(v_stop_condition)" &
"unfix YS" &
"unfix YS_mean_vec" &
"unfix Ncluster" &
"unfix rupture_detector"


# Unfix moves (relevant if continued directly)
unfix ylow_move
unfix yhigh_move

