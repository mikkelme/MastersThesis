###########################################
# Relax and stretch system, and export    #
# restart files if num_stretch_files > 0. #
###########################################


# Setup system
include ${root}/setup_sim.in
variable is_ruptured equal 0 # Default value



# --- Rupture detection computes --- #
if "!${rupture_detection}" then "jump SELF no_rupture_computes"

variable detection_freq equal 1000  # Number of timesteps between each rupture check
variable YS_mean_vals equal 10      # Number of y-stress mean values sampled
variable YS_vals equal 10           # Number of individual samples for each y-stress mean value
variable cluster_vals equal 10      # Number of cluster values sampled


variable YS_Nfreq equal floor(v_detection_freq/v_YS_mean_vals)
variable YS_Nevery equal floor(v_YS_Nfreq/v_YS_vals)
variable cluster_Nevery equal floor(v_detection_freq/v_cluster_vals)



# compute YS sheet reduce ave c_sheet_stress[2] # <------ Condider x^2 + y^2 or similar ... or?
fix YS sheet ave/time ${YS_Nevery} ${YS_vals} ${YS_Nfreq} c_YS file YS.txt # time average

# Cluster count
# compute cluster_atom full_sheet cluster/atom 4.0 # Atoms clustering within threshold
compute Ncluster full_sheet chunk/atom c_cluster_atom compress yes # Non empty chunks (accesing as a scalar gives num chunks)
fix Ncluster full_sheet ave/time ${cluster_Nevery} ${cluster_vals} ${detection_freq} c_Ncluster file cluster.txt # time average

# uncompute

label no_rupture_computes 




# ----------  Write restart files ---------- #
variable num_stretch_files index 0
if "${num_stretch_files}<=1" then "jump SELF no_restart"

variable restart_freq equal floor(v_stretch_steps/(v_num_stretch_files-1))
variable       stride equal stride(v_relax_steps,$(v_relax_steps+v_stretch_steps+v_restart_freq),v_restart_freq)
restart        v_stride stretch_*_restart


label no_restart


# ----------  Relax sheet ---------- #
# Add spring to restrict rotation or movement of sheet COM:
#  - Hold PB COM in initial x-position
#  - Hold sheet COM in initial position
fix PB_ylow_x_hold PB_ylow_rigid spring tether 1e5 $(c_sheet_COM[1]) NULL NULL 0.0
fix PB_high_x_hold PB_yhigh_rigid spring tether 1e5 $(c_sheet_COM[1]) NULL NULL 0.0
fix sheet_COM_hold full_sheet spring tether 1e5 $(c_sheet_COM[1]) $(c_sheet_COM[2]) NULL 0.0

print "--> Relax: $(v_relax_steps) timesteps, $(v_relax_steps*dt) ps"
thermo_style custom step time cpu cpuremain c_sheetTemp c_subtopTemp v_stretch_pct v_sheet_bond_pct v_full_sheet_bond_pct
run $(v_relax_steps-1)

# Lock S0 after relaxing and export S0 info via y-pos of tmp type 3 atom
variable S0 equal $(v_S0) 
if  "${num_stretch_files}>=1" then "create_atoms 3 single 0 $(v_S0) 0" &
"group S0_info type 3"
run 1

unfix PB_ylow_x_hold
unfix PB_high_x_hold
unfix sheet_COM_hold



# ---------- Stretch sheet ---------- # 
# Update fixes
fix ylow_move  PB_ylow_rigid move linear 0 $(-v_stretch_speed/2) NULL units box
fix yhigh_move PB_yhigh_rigid move linear 0 $(v_stretch_speed/2) NULL units box
print "--> Stretch: $(v_stretch_steps) timesteps, $(v_stretch_steps*dt) ps"

### No rupture detection ###
if "${rupture_detection}" then "jump SELF rupture_detection_stretch"
run $(v_stretch_steps)
jump SELF after_stretch



### Rupture detection ###
label rupture_detection_stretch

# Calculations for rupture detection
fix YS_mean_vec sheet vector ${YS_Nfreq} f_YS # Store mean values in vector
variable max_YS equal max(f_YS_mean_vec)
variable latest_YS equal f_YS

thermo_style custom step time cpu cpuremain v_stretch_pct v_latest_YS v_max_YS 

# Rupture conditions
variable stress_drop equal "f_YS < 0.5*v_max_YS"
variable cluster_split equal "f_Ncluster > 1" 
variable min_stretch equal "v_stretch_pct > 0.03"
variable stop_condition equal "(v_stress_drop || v_cluster_split) && v_min_stretch"


if "$(v_stop_condition)" then "jump SELF after_stretch"
fix rupture_detector sheet halt ${detection_freq} v_stop_condition != 0 error continue
run $(v_stretch_steps) 
if "${stop_condition}" then "variable is_ruptured equal 1"
unfix rupture_detector


if "${is_ruptured}" then "print 'IT IS RUPTURED'" &
else "print 'IT IS NOT RUPTURED'"



# Unfix (Uncompute) fixes (computes) with specific Nevery Nrepeat Nfreq choices
unfix YS
uncompute Ncluster 
unfix Ncluster

# variable is_ruptured equal 1

# ---------- After stretch ---------- # 
label after_stretch
restart 0

# Unfix moves (relevant if continued directly)
unfix ylow_move
unfix yhigh_move


