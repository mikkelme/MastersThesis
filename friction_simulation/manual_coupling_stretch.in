###########################################
# Relax and stretch system, and export    #
# restart files if num_stretch_files > 0. #
###########################################


# --- Default settings --- #
variable num_stretch_files index 0
variable run_rupture_test index 0

# Check is this is before of after planned rupture test
if "$(is_file(rupture_test.txt))" then "variable run_rupture_test_ equal 0" &
else &
"variable run_rupture_test_ equal ${run_rupture_test}" &
"variable SMAX equal $(v_stretch_max_pct)" &
"variable FN_max equal $(v_F_N)" &



# --- Setup system --- #
include ${root}/setup_sim.in
variable info_file string info_file.txt
# delete_atoms group substrate  # VACUUM 


# --- Rupture detection --- #
if "${run_rupture_test_}" then &
"variable stretch_slow_down     equal 1" &
else &
"variable stretch_slow_down     equal 1"


# --- Write info --- #
if "${run_rupture_test_}" then &
"variable info_file string rupture_test.txt" &
"variable stretch_speed          equal $(v_stretch_speed/v_stretch_slow_down)" &
"variable stretch_steps equal $(floor(v_stretch_slow_down*v_SMAX/v_stretch_speed_pct/dt))" 

print """&
root ${root}
config_data ${config_data}
out_ext ${out_ext}
dt ${dt}
T ${T}
relax_time ${relax_time}
stretch_speed_pct $(v_stretch_speed_pct/v_stretch_slow_down)
SMAX ${SMAX}
num_stretch_files ${num_stretch_files}
rupture_detection ${rupture_detection} &
""" file ${info_file}


variable FN_inc equal (v_stretch_speed_pct*v_FN_max)*dt
variable stretch_steps equal $(floor(v_FN_max/v_FN_inc))



# ----------  Write restart files ---------- #
if "${num_stretch_files}<1 || ${run_rupture_test_}" then "jump SELF after_restart"

variable RNSEED index -1  # Random seed (use command-line argument: -var RNSEED $RANDOM, to generate seed)
if "${RNSEED} >= 0" then "jump SELF RN_restart"  

if "${num_stretch_files}==1" then &
"restart $(v_relax_steps+v_stretch_steps) stretch_*_restart" &
"jump SELF after_restart"

variable restart_freq equal floor((v_stretch_steps)/(v_num_stretch_files-1))
variable       stride equal stride(v_relax_steps,$(v_relax_steps+v_stretch_steps+v_restart_freq),v_restart_freq)

restart  v_stride stretch_*_restart

jump SELF after_restart
label RN_restart

variable restart_freq  equal floor(v_stretch_steps/(v_num_stretch_files))
variable start         equal v_relax_steps+(step!=0)*v_restart_freq*ceil((step-v_relax_steps)/v_restart_freq) # interval start
variable restart_steps equal round(random(v_start,v_start+v_restart_freq,v_RNSEED+1)) # random timestep in [start+1, start + restart_freq]
restart  v_restart_steps stretch_*_restart

label after_restart




# ----------  Relax sheet ---------- #
# Add spring to restrict rotation or movement of sheet COM:
#  - Hold PB COM in initial x-position
#  - Hold sheet COM in initial position
fix PB_ylow_x_hold PB_ylow_rigid spring tether 1e5 $(c_PB_tot_COM[1]) NULL NULL 0.0
fix PB_high_x_hold PB_yhigh_rigid spring tether 1e5 $(c_PB_tot_COM[1]) NULL NULL 0.0
fix sheet_COM_hold full_sheet spring tether 1e5 $(c_sheet_COM[1]) $(c_sheet_COM[2]) NULL 0.0

print "--> Relax: $(v_relax_steps) timesteps, $(v_relax_steps*dt) ps"

if "${rupture_detection}" then "thermo_style custom step time cpu cpuremain c_sheetTemp c_subtopTemp v_stretch_pct v_full_sheet_bond_pct c_bmax " &
else "thermo_style custom step time cpu cpuremain c_sheetTemp c_subtopTemp v_stretch_pct v_full_sheet_bond_pct"
run $(v_relax_steps-1)
if "${is_ruptured}" then "jump SELF after_stretch"

# Lock S0 after relaxing and export S0 info via y-pos of tmp type 3 atom
variable S0 equal $(v_S0) 
if  "${num_stretch_files}>=1" then "create_atoms 3 single 0 $(v_S0) 0 units box" &
"group S0_info type 3"
run 1
if "${is_ruptured}" then "jump SELF after_stretch"

unfix PB_ylow_x_hold
unfix PB_high_x_hold
unfix sheet_COM_hold



# ---------- Load and stretch ---------- # 
# Variable interpretation
# stretch_speed_pct: increase in normal load pr. ps relative to v_FN_max

# Reset velocity and define force averages
velocity PB_tot_rigid set 0 0 0
unfix PB_ave 
fix PB_ave_tot PB_tot_rigid aveforce 0 NULL 0 
fix PB_ave_ylow PB_ylow_rigid aveforce NULL 0 NULL 
fix PB_ave_yhigh PB_yhigh_rigid aveforce NULL 0 NULL 

# variables
variable R index 1 # tension = R * normal load


# Normal load
variable load equal (v_FN_inc*(step-v_relax_steps))
variable load_atom equal -v_load/count(PB_tot)
fix normal_force PB_tot addforce 0.0 0.0 v_load_atom

# Stretch tension
variable tension equal v_load*v_R 
variable tension_atom_ylow equal -v_tension/count(PB_ylow_rigid)
variable tension_atom_yhigh equal v_tension/count(PB_yhigh_rigid)
fix ylow_tension PB_ylow_rigid addforce 0.0 v_tension_atom_ylow 0.0
fix yhigh_tension PB_yhigh_rigid addforce 0.0 v_tension_atom_yhigh 0.0

# Move S0_info in x-direction to save load (as load*1e-2)
if  "${num_stretch_files}>=1" then "fix load_save S0_info move linear $(v_FN_inc/dt*1e-2) NULL NULL units box"

# run
thermo_style custom step time cpu cpuremain c_sheetTemp c_subtopTemp v_stretch_pct v_full_sheet_bond_pct v_load v_tension
print "--> Stretch: $(v_stretch_steps) timesteps, $(v_stretch_steps*dt) ps"
run $(v_stretch_steps)


unfix normal_force
unfix ylow_tension
unfix yhigh_tension
unfix PB_ave_tot 
unfix PB_ave_ylow 
unfix PB_ave_yhigh 


# ---------- After stretch ---------- # 
label after_stretch
## rupture detection: TRUE/FALSE
if "!${rupture_detection}" then &
"print 'is_ruptured None' append info_file.txt" &
"jump SELF no_rupture_detection"

# Write is_ruptured to info file
# variable is_ruptured equal $(v_bondbreak)
print """&
run_rupture_test ${run_rupture_test_}
is_ruptured ${is_ruptured} &
""" append ${info_file}

## Is ruptured: TRUE/FALSE
if "!${is_ruptured}" then "jump SELF no_rupture"

# Write rupture step and stretch value to info file
thermo_style custom c_PB_yhigh_rigid_ymin c_PB_ylow_rigid_ymax
run 0
print """&
rupture_step $(step)
rupture_stretch ${stretch_pct}
rupture_tension ${tension}
rupture_load ${load} &
""" append ${info_file}
variable SMAX equal ${stretch_pct} 
variable FN_max equal ${load} 
label no_rupture 

label no_rupture_detection 

# Repeat script without rupture test
if "${run_rupture_test_}" then &
"clear" &
"include ${root}/manual_coupling_stretch.in" # use jump instead?


