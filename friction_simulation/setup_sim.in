#####################################
# Setup simulation from read_data   #
# config file or from restart file. # 
#####################################

# SWITCH: read_data || read_restart
variable restart_file index None
variable readable equal is_file(${restart_file})
if ${readable} then "jump SELF setup_from_restart_file"

####################################
### --- Setup from read_data --- ###
####################################
print "Setting up simulation from read_data: ${config_data}.txt"

# --- Basics --- # 
units metal
newton on #newtons 3rd law for pairs
boundary p p m  
atom_style atomic # coarse-grain liquids, solids, metals

# --- Read files --- #
read_data ${root}/${config_data}.txt extra/atom/types 1  # sheet and substrate (1 extra type for virtuel atom)
include ${root}/${config_data}_info.in                   # import variables


# --- Regions and groups --- #
variable eps equal 0.1 # small number to ensure all atoms is inside interval

# Sheet 
region sheet_region block INF INF $(v_pullblock_yhi+v_eps) $(v_pullblock_ylo-v_eps) ${pullblock_zlo} INF
region full_sheet_region block INF INF INF INF ${pullblock_zlo} INF
group  sheet region sheet_region
group  full_sheet region full_sheet_region 

# Pullblocks
region PB_ylow_region  block INF INF INF $(v_pullblock_yhi+v_eps) ${pullblock_zlo} INF
region PB_yhigh_region block INF INF $(v_pullblock_ylo-v_eps) INF ${pullblock_zlo} INF
group  PB_ylow region PB_ylow_region
group  PB_yhigh region PB_yhigh_region
group  PB_tot union PB_ylow PB_yhigh

# Substrate
region substrate_freeze_region block INF INF INF INF INF ${substrate_freeze_zhi}
region substrate_contact_region block INF INF INF INF ${substrate_contact_zlo} ${pullblock_zlo}
group  substrate type 2
group  substrate_freeze region substrate_freeze_region
group  substrate_contact region substrate_contact_region

# Moving atoms
group free_atoms subtract all PB_tot substrate_freeze 
group semifree_atoms subtract all substrate_freeze 

# --- Dynamics --- #            
mass 1 12.0107          # C
mass 2 28.0855          # Si
# mass 2 196.966570     # Au
mass 3 1.0              # Virtuel atom

# ^^^^^^^^^^^^
# Make a more safe way to change this back and forth

velocity free_atoms create ${T} 5432373 dist gaussian

# JUMP
jump SELF common_settings 


#######################################
### --- Setup from read_restart --- ###
#######################################
label setup_from_restart_file
print "Setting up simulation from read_restart: ${restart_file}"

# --- Read restart file --- #
read_restart ${restart_file}
include ${root}/${config_data}_info.in 
compute get_S0 S0_info reduce sum y # Retrieve information about S0 via type 3 tmp atom


###############################
### --- Common settings --- ###
###############################
label common_settings
neighbor            0.5 bin
neigh_modify        delay 0 every 1 one 10000


# # Potentials: C-C: Airebo, C-Si: LJ, Si-Si: SW
# pair_style hybrid sw lj/cut 8.15 airebo 6.4 1 1 # lj_cutoff = 2.5*sigma 
# pair_coeff * * airebo ${root}/CH.airebo C NULL NULL    # Sheet C-C
# pair_coeff 1 2 lj/cut 0.008909 3.26                    # Interaction C-Si 
# pair_coeff * * sw ${root}/si.sw NULL Si NULL           # Substrate Si-Si
# pair_coeff * 3  lj/cut 0.0 0.0 

# ------- GOLD SUBSTRATE ------- # 
# Potentials: C-C: Airebo, C-Si: LJ, Si-Si: SW
# variable LJ_sigma equal 2.74 
# pair_style hybrid eam/fs lj/cut $(v_LJ_sigma*2.5) airebo 6.4 1 1 
# pair_coeff * * airebo ${root}/CH.airebo C NULL NULL     # Sheet C-C
# pair_coeff 1 2 lj/cut 0.022 ${LJ_sigma}                        # Interaction C-Si 
# pair_coeff * * eam/fs ${root}/FeAu-eam-LJ.fs NULL Au NULL      # Substrate Au-Au
# pair_coeff * 3 lj/cut 0.0 0.0 


# ------- SI SUBSTRATE TERSOFF ------- # 
# Potentials: C-C: Tersoff, C-Si: LJ, Si-Si: SW
variable LJ_sigma equal 3.26 
pair_style hybrid tersoff lj/cut $(v_LJ_sigma*2.5) sw 
pair_coeff * * tersoff ${root}/C.tersoff C NULL NULL   # Sheet C-C
pair_coeff 1 2 lj/cut 0.008909 ${LJ_sigma}             # Interaction C-Si 
pair_coeff * * sw ${root}/si.sw NULL Si NULL           # Substrate Si-Si
pair_coeff * 3  lj/cut 0.0 0.0 


variable LJ_equil equal $(2^(1/6) * v_LJ_sigma)
variable contact_cut_off equal $(v_LJ_equil*1.1)

timestep $(v_dt)
variable damp equal 1.0 # ps                        
fix nve semifree_atoms nve # (microcanonical) 
fix nvt semifree_atoms langevin ${T} ${T} ${damp} 48279 # (canonical)
fix 2 all balance 1000 1.05 shift xy 10 1.05 # balance number of particles computed on each processor 
fix PB_ave PB_tot aveforce NULL NULL 0 # Average z-force



# --- Convertion: SI to metal --- #
variable N_to_eV_over_ang equal 6.24150907e8    # force: N -> eV/Å
variable m_to_ang equal 1e10                    # distance: m -> Å
variable s_to_ps equal 1e12                     # time: s -> ps


# ---------- Computes ---------- #
variable Nevery equal 1     # use input values every this many time steps
variable Nrepeat equal 100  # number of times to use input values for calculating averages
variable Nfreq equal 100    # calculate averages every this many time steps

## - Sheet - ##
# Full sheet
compute sheet_COM full_sheet com            # Center of mass
compute sheet_fz full_sheet reduce ave fz   # Average z-force
# compute bond_coord full_sheet coord/atom cutoff 4.0 group substrate_contact
compute bond_coord full_sheet coord/atom cutoff ${contact_cut_off} group substrate_contact
fix full_sheet_bond_hist full_sheet ave/histo 1 1 1 -0.5 1.5 2 c_bond_coord mode vector beyond end
variable full_sheet_bond_pct equal f_full_sheet_bond_hist[2][3]

# Inner sheet 
compute sheet_fx sheet reduce sum fx        # Total force x
compute sheet_fy sheet reduce sum fy        # Total force y
compute coord sheet coord/atom cutoff 2.7   # Coordination number
compute peratom sheet stress/atom NULL      # stress field
# variable stress_atom atom sqrt(c_peratom[1]*c_peratom[1]+c_peratom[2]*c_peratom[2]+c_peratom[3]*c_peratom[3]) # Stress norm (xx, yy, zz)
# ^^^ This is not so important if it reduces computation time considerably 

fix sheet_bond_hist sheet ave/histo 1 1 1 -0.5 1.5 2 c_bond_coord mode vector beyond end
variable sheet_bond_pct equal f_sheet_bond_hist[2][3]


## - Pullblocks - ##
compute PB_ylow_ymax PB_ylow reduce max y   # Lower y-limit for sheet
compute PB_yhigh_ymin PB_yhigh reduce min y # Upper y-limit for sheet
compute PB_ylow_com PB_ylow com             # Center of mass PB_ylow
compute PB_yhigh_com PB_yhigh com           # Center of mass PB_yhigh

## -- Substrate -- ##
compute substrate_zhigh substrate reduce max z # Max z-val of substrate

## Interactions ##
compute Ff substrate group/group full_sheet # friction forces
compute Ff_sheet substrate group/group sheet # friction forces
compute Ff_PB substrate group/group PB_tot # friction forces

## Temperature of free atoms ##
compute freeTemp free_atoms temp


## - Activate computes - ## 
thermo_style custom c_sheet_fz c_PB_ylow_ymax c_PB_yhigh_ymin c_substrate_zhigh c_PB_ylow_com[2] c_PB_yhigh_com[2] c_sheet_COM[3]
run 0 # activate compute

# ---------- Derived variables ---------- #
## -- Seperation -- ##
variable sub_sheet_seperation equal c_sheet_COM[3]-c_substrate_zhigh  # seperation between substrate max and COM of sheet

## -- Force on PB -- ##
variable move_force_x equal c_sheet_fx+c_Ff[1]
variable move_force_y equal c_sheet_fy+c_Ff[2]
variable move_force_xy_norm equal sqrt(v_move_force_x^2+v_move_force_x^2)  

## -- Stretch -- ##
# variable S0 equal v_pullblock_ylo-v_pullblock_yhi   # OLD rough version
variable S0 equal c_PB_yhigh_ymin-c_PB_ylow_ymax    # start len of inner sheet 

# Restart file: Get S0 stored in type 3 tmp atom
if ${readable} then "thermo_style custom c_get_S0 c_PB_ylow_ymax c_PB_yhigh_ymin" &
"run 0" &
"variable S0 equal $(c_get_S0)" &
"delete_atoms group S0_info"

variable S_len equal c_PB_yhigh_ymin-c_PB_ylow_ymax # Updated len of inner sheet
variable stretch_pct equal (v_S_len-v_S0)/v_S0  # Updated stretch pct
variable stretch_speed equal v_stretch_speed_pct*v_S0 

## -- Drag -- ##
variable dir_norm equal $(sqrt(v_drag_dir_x^2+v_drag_dir_y^2))

# # RDF
# compute myRDF sheet rdf 1000 1 1 #cutoff 8.65 
# fix tmp all ave/time 100 1 100 c_myRDF[*] file rdf.txt mode vector



# ---------- Output ---------- #
variable dump_freq index 1000
variable thermo index 1000
thermo $(v_thermo)

dump 1 all custom $(v_dump_freq) system_${out_ext}.data id type x y z vx vy vz c_bond_coord
dump 2 full_sheet custom $(v_dump_freq) full_sheet_${out_ext}.data id type x y z vx vy vz c_bond_coord
fix coord_out sheet ave/histo ${Nevery} ${Nrepeat} ${Nfreq} -0.5 5.5 6 c_coord mode vector file sheet_${out_ext}_chist.txt
# fix contact_bonds full_sheet ave/time ${Nevery} ${Nrepeat} ${Nfreq} v_sheet_bond_pct v_full_sheet_bond_pct file bond_pct.txt ### <---- This is already in friction_file !?!?


# ---------- Print procedure schedule ---------- #
# Timestamps
variable relax_steps equal $(floor(v_relax_time/dt))
variable stretch_steps equal $(floor(v_stretch_max_pct/v_stretch_speed_pct/dt))
variable pause1_steps equal $(floor(v_pause_time1/dt))
variable pause2_steps equal $(floor(v_pause_time2/dt))
variable drag_steps equal $(floor(v_drag_length/v_drag_speed/dt))

# Print
print "--------------------"
print "------SCHEDULE------"
print ""
print "--> Relax (step 0, 0 ps)"
print "Time: $(v_relax_steps) steps = $(v_relax_steps*dt) ps" 
print ""
print "--> Stretch sheet (step $(v_relax_steps), $(v_relax_steps*dt) ps)"
print "Amount: $(v_stretch_max_pct) % = $(v_stretch_max_pct*(v_pullblock_ylo-v_pullblock_yhi)) ang "
print "Speed: $(v_stretch_speed_pct) %/ps = $(v_stretch_speed) ang/ps"
print "Time:  $(v_stretch_steps) steps = $(v_stretch_steps*dt) ps"
print ""
print "--> Pause 1 (step $(v_relax_steps+v_stretch_steps), $((v_relax_steps+v_stretch_steps)*dt) ps)"
print "Time: $(v_pause1_steps) steps = $(v_pause1_steps*dt) ps"
print ""
print "--> Apply normal force (step $(v_relax_steps+v_stretch_steps+v_pause1_steps), $((v_relax_steps+v_stretch_steps+v_pause1_steps)*dt) ps)"
print "Amount: $(v_F_N/v_N_to_eV_over_ang*1e9) nN/m = $(v_F_N) eV/ang"
print ""
print "--> Pause 2 (step $(v_relax_steps+v_stretch_steps+v_pause1_steps), $((v_relax_steps+v_stretch_steps+v_pause1_steps)*dt) ps)"
print "Time: $(v_pause2_steps) steps = $(v_pause2_steps*dt) ps"
print ""
print "--> Drag sheet (step $(v_relax_steps+v_stretch_steps+v_pause1_steps+v_pause2_steps), $((v_relax_steps+v_stretch_steps+v_pause1_steps+v_pause2_steps)*dt) ps)"
print "Length: $(v_drag_length) ang"
print "Speed: $(v_drag_speed*v_s_to_ps/v_m_to_ang) m/s = $(v_drag_speed) ang/ps "
print "Spring constant: $(v_K*v_m_to_ang/v_N_to_eV_over_ang) N/m = $(v_K) eV/ang^2"
print "Time: $(v_drag_steps)  = $(v_drag_steps*dt) ps"
print ""
print "--> END (step $(v_relax_steps+v_stretch_steps+v_pause1_steps+v_pause2_steps+v_drag_steps), $((v_relax_steps+v_stretch_steps+v_pause1_steps+v_pause2_steps+v_drag_steps)*dt) ps)"
print "--------------------"
print "--------------------"
print ""


