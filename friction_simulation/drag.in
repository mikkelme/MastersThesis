# Setup system
variable restart_file index None
variable readable equal is_file(${restart_file})
if !${readable} then "jump SELF system_is_running"

include ${root}/setup_sim.in
variable stretch_max_pct index v_stretch_pct # update stretch_max_pct with val from restart file

# ---------- Print drag schedule ---------- #
# Timestamps
variable start_step equal $(step)
variable pause1_steps equal $(floor(v_pause_time1/dt))
variable pause2_steps equal $(floor(v_pause_time2/dt))
variable drag_steps equal $(floor(v_drag_length/v_drag_speed/dt))

# Print
print "-------------------------"
print "------DRAG SCHEDULE------"
print ""
print "--> Pause 1 (step $(v_start_step), $((v_start_step)*dt) ps)"
print "Time: $(v_pause1_steps) steps = $(v_pause1_steps*dt) ps"
print ""
print "--> Apply normal force (step $(v_start_step+v_pause1_steps), $((v_start_step+v_pause1_steps)*dt) ps)"
print "Amount: $(v_F_N/v_N_to_eV_over_ang*1e9) nN/m = $(v_F_N) eV/ang"
print ""
print "--> Pause 2 (step $(v_start_step+v_pause1_steps), $((v_start_step+v_pause1_steps)*dt) ps)"
print "Time: $(v_pause2_steps) steps = $(v_pause2_steps*dt) ps"
print ""
print "--> Drag sheet (step $(v_start_step+v_pause1_steps+v_pause2_steps), $((v_start_step+v_pause1_steps+v_pause2_steps)*dt) ps)"
print "Length: $(v_drag_length) ang"
print "Speed: $(v_drag_speed*v_s_to_ps/v_m_to_ang) m/s = $(v_drag_speed) ang/ps "
print "Spring constant: $(v_K*v_m_to_ang/v_N_to_eV_over_ang) N/m = $(v_K) eV/ang^2"
print "Time: $(v_drag_steps)  = $(v_drag_steps*dt) ps"
print ""
print "--> END (step $(v_start_step+v_pause1_steps+v_pause2_steps+v_drag_steps), $((v_start_step+v_pause1_steps+v_pause2_steps+v_drag_steps)*dt) ps)"
print "-------------------------"
print "-------------------------"
print ""


label system_is_running


# Write variables to info_file.txt
print """&
dt ${dt}
temp ${temp}
relax_time ${relax_time}
pause_time1 ${pause_time1}
pause_time2 ${pause_time2}
stretch_speed_pct ${stretch_speed_pct}
drag_speed ${drag_speed}
drag_length ${drag_length}
K ${K}
root ${root}
out_ext ${out_ext}
config_data ${config_data}
stretch_max_pct ${stretch_max_pct}
drag_dir_x ${drag_dir_x}
drag_dir_y ${drag_dir_y}
F_N ${F_N}
restart_file: ${restart_file}&
""" file info_file.txt


# ---------- Pause 1 ---------- #
# Update fixes
unfix nve
fix nve semifree_atoms nve
velocity PB_tot set 0 0 0
thermo_style custom step time cpu cpuremain temp

print "--> Pause 1: $(v_pause1_steps) timesteps, $(v_pause1_steps*dt) ps"
run  $(v_pause1_steps) 

# ---------- Apply normal force ---------- #
print "--> Apply normal force = $(v_F_N)"
fix normal_force PB_tot addforce 0.0 0.0 $(-v_F_N/count(PB_tot))
thermo_style custom step time cpu cpuremain temp v_stretch_pct c_sheet_COM[3] c_Ff[3] f_normal_force[3] c_sheet_fz v_sub_sheet_seperation

# Add damper
variable viscosity equal 0.05
variable step_dampen equal 500
fix PB_damper PB_tot viscous $(v_viscosity)


# ---------- Pause 2 ---------- #
print "--> Pause 2: $(v_pause2_steps) timesteps, $(v_pause2_steps*dt) ps"
print "--> damper on (viscosity = $(v_viscosity)) "

# Run with damper on
if $(v_step_dampen)>$(v_pause2_steps) then "variable step_dampen equal v_pause2_steps"
run $(v_step_dampen)

# Run remaining with damper off
unfix PB_damper
print "--> damper off"
run  $(v_pause2_steps-v_step_dampen) 

# ---------- Drag sheet ---------- #
# Create virtuel atom (place in sheet COM)
thermo_style custom c_sheet_COM[3] 
run 0
create_atoms 3 single $(c_sheet_COM[1]) $(c_sheet_COM[2]) $(c_sheet_COM[3])
group virtuel_atom type 3



if "$(v_K) != 0" then "jump SELF spring_move"
# Fix move
unfix nve 
fix nve free_atoms nve 
fix move_PB PB_tot move linear $(v_drag_speed*v_drag_dir_x/v_dir_norm) $(v_drag_speed*v_drag_dir_y/v_dir_norm) NULL units box 
thermo_style custom step time cpu cpuremain temp v_stretch_pct c_sheet_COM[1] c_sheet_COM[2] c_Ff[1] c_Ff[2] v_move_force_xy_norm  
jump SELF after_move_commands

# Spring move
label spring_move
fix spring_force PB_tot spring couple virtuel_atom $(v_K) 0.0 0.0 NULL 0.0
variable v_move_force_x equal f_spring_force[1] 
variable v_move_force_y equal f_spring_force[2] 
thermo_style custom step time cpu cpuremain temp v_stretch_pct c_sheet_COM[1] c_sheet_COM[2] f_spring_force[4]
label after_move_commands


# Output
fix friction_force_spring all ave/time ${Nevery} ${Nrepeat} ${Nfreq} v_move_force_x v_move_force_y c_Ff_sheet[1] c_Ff_sheet[2] c_Ff_sheet[3] c_Ff_PB[1] c_Ff_PB[2] c_Ff_PB[3] c_sheet_COM[1] c_sheet_COM[2] c_sheet_COM[3] v_full_sheet_bond_pct v_sheet_bond_pct file system_${out_ext}_Ff.txt 

# Move virtuel atom 
fix move_va virtuel_atom move linear $(v_drag_speed*v_drag_dir_x/v_dir_norm) $(v_drag_speed*v_drag_dir_y/v_dir_norm) 0 units box 

print "--> Drag : $(v_drag_steps) timesteps, $(v_drag_steps*dt) ps"
run  $(v_drag_steps) 

